# Number of jobs
ncases = 30

# Job size distributions [(percentage, number of workers)]
job_size_distribution = [[80, 8], [80, 12]]

# Buffer size of all jobs, in bytes, similar to ResNet50 ~= 98MB
buffer_size = 100_000_000

# Number of iterations for all jobs
num_iterations = 100

# Lambda of the poisson arrival, 2*100MB/50Gbps = 0.032s each iteration, total in 3.2s
poisson_lambda = 2_400_000_000.0

placement_strategy = { type = "Compact" }
# placement_strategy = { type = "CompactLoadBalanced" }
# placement_strategy = { type = "Spread" }
# placement_strategy = { type = "Random", args = 0 }

# global seed
seed = 1

# Output path of for the simulation results
directory = "/tmp/sensitivity_rack_size/sensitivity_rack_size_base"

# Number of repeats for each batch of experiments
batch_repeat = 5

[[batch]]
policy = "Random"
probe = { enable = false }
nethint_level = 2

# [[batch]]
# policy = "RAT"
# probe = { enable = true, round_ms = 100 }
# nethint_level = 2
# auto_tune = 1000

[[batch]]
policy = "RAT"
probe = { enable = false }
nethint_level = 2
# Auto tune after some iterations. default is disabled
auto_tune = 10

[simulator]
nethint = true
sample_interval_ns = 100_000_000 # 100ms
loopback_speed = 400
# possible values of fairness model are "PerFlowMaxMin", "PerVmPairMaxMin", and "TenantFlowMaxMin"
# fairness = "TenantFlowMaxMin"
fairness = "PerFlowMaxMin"

background_flow_hard = { enable = true, frequency_ns = 10_000_000_000, probability = 1.0, amplitude = 5, average_load = 0.1 }
# background_flow_hard = { enable = false }
# nethint_delay_ms = 100

[brain]
# Random seed for multiple uses
seed = 1
# Whether the cluster's bandwidth is asymmetric
asymmetric = false
# The percentage of nodes marked broken
broken = 0.0
# The slots of each physical machine
max_slots = 1
# how bandwidth is partitioned among multiple VMs in the same physical server, possible values are "RateLimited", "Guaranteed"
sharing_mode = "Guaranteed"
guaranteed_bandwidth = 25
background_flow_high_freq = { enable = true, probability = 1.0, amplitude = 10 }
# background_flow_high_freq = { enable = false }
gc_period = 10

# The topology for simulation
[brain.topology]
type = "Arbitrary"  # another possible value is "FatTree"

# [brain.topology.args] # When type = "FatTree"
# nports = 20           # the number of ports of a switch
# bandwidth = 100       # in Gbps
# oversub_ratio = 4.0   # oversubscription ratio

[brain.topology.args]         # When type = "Arbitrary"
nracks = 320        # the number of racks
rack_size = 0      # the number of hosts under a rack
host_bw = 100       # bandwidth of a host, in Gbps
rack_bw = 0       # bandwidth of a ToR switch, in Gbps

# [envs]
# KEY = "value"
